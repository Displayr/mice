
R version 2.4.1 (2006-12-18)
Copyright (C) 2006 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### * <HEADER>
> ###
> attach(NULL, name = "CheckExEnv")
> assign("nameEx", 
+        local({
+ 	   s <- "__{must remake R-ex/*.R}__"
+            function(new) {
+                if(!missing(new)) s <<- new else s
+            }
+        }),
+        pos = "CheckExEnv")
> ## Add some hooks to label plot pages for base and grid graphics
> assign("base_plot_hook",
+        function() {
+            pp <- par(c("mfg","mfcol","oma","mar"))
+            if(all(pp$mfg[1:2] == c(1, pp$mfcol[2]))) {
+                outer <- (oma4 <- pp$oma[4]) > 0; mar4 <- pp$mar[4]
+                mtext(sprintf("help(\"%s\")", nameEx()), side = 4,
+                      line = if(outer)max(1, oma4 - 1) else min(1, mar4 - 1),
+               outer = outer, adj = 1, cex = .8, col = "orchid", las=3)
+            }
+        },
+        pos = "CheckExEnv")
> assign("grid_plot_hook",
+        function() {
+            pushViewport(viewport(width=unit(1, "npc") - unit(1, "lines"),
+                                  x=0, just="left"))
+            grid.text(sprintf("help(\"%s\")", nameEx()),
+                      x=unit(1, "npc") + unit(0.5, "lines"),
+                      y=unit(0.8, "npc"), rot=90,
+                      gp=gpar(col="orchid"))
+        },
+        pos = "CheckExEnv")
> setHook("plot.new",     get("base_plot_hook", pos = "CheckExEnv"))
> setHook("persp",        get("base_plot_hook", pos = "CheckExEnv"))
> setHook("grid.newpage", get("grid_plot_hook", pos = "CheckExEnv"))
> assign("cleanEx",
+        function(env = .GlobalEnv) {
+ 	   rm(list = ls(envir = env, all.names = TRUE), envir = env)
+            RNGkind("default", "default")
+ 	   set.seed(1)
+    	   options(warn = 1)
+ 	   .CheckExEnv <- as.environment("CheckExEnv")
+ 	   delayedAssign("T", stop("T used instead of TRUE"),
+ 		  assign.env = .CheckExEnv)
+ 	   delayedAssign("F", stop("F used instead of FALSE"),
+ 		  assign.env = .CheckExEnv)
+ 	   sch <- search()
+ 	   newitems <- sch[! sch %in% .oldSearch]
+ 	   for(item in rev(newitems))
+                eval(substitute(detach(item), list(item=item)))
+ 	   missitems <- .oldSearch[! .oldSearch %in% sch]
+ 	   if(length(missitems))
+ 	       warning("items ", paste(missitems, collapse=", "),
+ 		       " have been removed from the search path")
+        },
+        pos = "CheckExEnv")
> assign("ptime", proc.time(), pos = "CheckExEnv")
> grDevices::postscript("mice-Ex.ps")
> assign("par.postscript", graphics::par(no.readonly = TRUE), pos = "CheckExEnv")
> options(contrasts = c(unordered = "contr.treatment", ordered = "contr.poly"))
> options(warn = 1)    
> library('mice')
Loading required package: Hmisc
Hmisc library by Frank E Harrell Jr

Type library(help='Hmisc'), ?Overview, or ?Hmisc.Overview')
to see overall documentation.

NOTE:Hmisc no longer redefines [.factor to drop unused levels when
subsetting.  To get the old behavior of Hmisc type dropUnusedLevels().
Loading required package: MASS
Loading required package: nnet
MICE V1.15 library            Copyright (2004) TNO Prevention and Health, Leiden
This library is distributed under the GNU General Public License (version 2)
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> assign(".oldNS", loadedNamespaces(), pos = 'CheckExEnv')
> cleanEx(); nameEx("complete");
> ### * complete
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: complete
> ### Title: Produces Imputed Flat Files from Multiply Imputed Data Set
> ###   (mids)
> ### Aliases: complete
> ### Keywords: misc
> 
> ### ** Examples
> 
> data(nhanes)
> imp <- mice(nhanes)     # do default multiple imputation on a numeric matrix

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> mat <- complete(imp)    # fills in the first imputation
> mat <- complete(imp, 3) # fills in the third imputation
> mat <- complete(imp, "long") # produces a long matrix with stacked complete data
> mat <- complete(imp, "b") # a broad matrix
> cor(mat)                # for numeric mat, produces a blocked correlation matrix, where
           age.1       bmi.1       hyp.1     chl.1      age.2        bmi.2
age.1  1.0000000 -0.47937307  0.62601727 0.3342430  1.0000000 -0.517139566
bmi.1 -0.4793731  1.00000000 -0.08569047 0.2422012 -0.4793731  0.916997114
hyp.1  0.6260173 -0.08569047  1.00000000 0.2258765  0.6260173 -0.111261580
chl.1  0.3342430  0.24220121  0.22587650 1.0000000  0.3342430  0.238853920
age.2  1.0000000 -0.47937307  0.62601727 0.3342430  1.0000000 -0.517139566
bmi.2 -0.5171396  0.91699711 -0.11126158 0.2388539 -0.5171396  1.000000000
hyp.2  0.3968185 -0.01069988  0.77664316 0.3146029  0.3968185 -0.017138434
chl.2  0.3961335  0.28616945  0.34799288 0.7734804  0.3961335  0.252981580
age.3  1.0000000 -0.47937307  0.62601727 0.3342430  1.0000000 -0.517139566
bmi.3 -0.4442540  0.93520121 -0.01932793 0.2353943 -0.4442540  0.907656046
hyp.3  0.6260173 -0.08569047  1.00000000 0.2258765  0.6260173 -0.111261580
chl.3  0.4903932  0.13025079  0.33525853 0.7872208  0.4903932  0.006171866
age.4  1.0000000 -0.47937307  0.62601727 0.3342430  1.0000000 -0.517139566
bmi.4 -0.4784506  0.75194676 -0.19267855 0.3017948 -0.4784506  0.786558863
hyp.4  0.6260173 -0.08569047  1.00000000 0.2258765  0.6260173 -0.111261580
chl.4  0.5229537  0.14925816  0.31673536 0.6633038  0.5229537  0.150010447
age.5  1.0000000 -0.47937307  0.62601727 0.3342430  1.0000000 -0.517139566
bmi.5 -0.4259534  0.80606686 -0.08983133 0.3330261 -0.4259534  0.809132273
hyp.5  0.5109406 -0.17400514  0.78070175 0.3692396  0.5109406 -0.159712783
chl.5  0.3011421  0.26016762  0.23221204 0.8768280  0.3011421  0.235423372
             hyp.2     chl.2      age.3        bmi.3       hyp.3        chl.3
age.1  0.396818495 0.3961335  1.0000000 -0.444254018  0.62601727  0.490393183
bmi.1 -0.010699882 0.2861694 -0.4793731  0.935201211 -0.08569047  0.130250788
hyp.1  0.776643163 0.3479929  0.6260173 -0.019327931  1.00000000  0.335258527
chl.1  0.314602882 0.7734804  0.3342430  0.235394345  0.22587650  0.787220800
age.2  0.396818495 0.3961335  1.0000000 -0.444254018  0.62601727  0.490393183
bmi.2 -0.017138434 0.2529816 -0.5171396  0.907656046 -0.11126158  0.006171866
hyp.2  1.000000000 0.4825977  0.3968185  0.006353626  0.77664316  0.205211785
chl.2  0.482597720 1.0000000  0.3961335  0.182937905  0.34799288  0.592454385
age.3  0.396818495 0.3961335  1.0000000 -0.444254018  0.62601727  0.490393183
bmi.3  0.006353626 0.1829379 -0.4442540  1.000000000 -0.01932793  0.172234103
hyp.3  0.776643163 0.3479929  0.6260173 -0.019327931  1.00000000  0.335258527
chl.3  0.205211785 0.5924544  0.4903932  0.172234103  0.33525853  1.000000000
age.4  0.396818495 0.3961335  1.0000000 -0.444254018  0.62601727  0.490393183
bmi.4  0.018215389 0.2362060 -0.4784506  0.650813612 -0.19267855 -0.050301879
hyp.4  0.776643163 0.3479929  0.6260173 -0.019327931  1.00000000  0.335258527
chl.4  0.430939588 0.7947607  0.5229537  0.070366051  0.31673536  0.437981604
age.5  0.396818495 0.3961335  1.0000000 -0.444254018  0.62601727  0.490393183
bmi.5 -0.007667878 0.1546789 -0.4259534  0.888671688 -0.08983133  0.259351631
hyp.5  0.776643163 0.3549732  0.5109406 -0.143715605  0.78070175  0.234724679
chl.5  0.307628917 0.6708878  0.3011421  0.330771725  0.23221204  0.825863768
           age.4       bmi.4       hyp.4      chl.4      age.5        bmi.5
age.1  1.0000000 -0.47845063  0.62601727 0.52295375  1.0000000 -0.425953368
bmi.1 -0.4793731  0.75194676 -0.08569047 0.14925816 -0.4793731  0.806066863
hyp.1  0.6260173 -0.19267855  1.00000000 0.31673536  0.6260173 -0.089831329
chl.1  0.3342430  0.30179481  0.22587650 0.66330383  0.3342430  0.333026123
age.2  1.0000000 -0.47845063  0.62601727 0.52295375  1.0000000 -0.425953368
bmi.2 -0.5171396  0.78655886 -0.11126158 0.15001045 -0.5171396  0.809132273
hyp.2  0.3968185  0.01821539  0.77664316 0.43093959  0.3968185 -0.007667878
chl.2  0.3961335  0.23620596  0.34799288 0.79476072  0.3961335  0.154678878
age.3  1.0000000 -0.47845063  0.62601727 0.52295375  1.0000000 -0.425953368
bmi.3 -0.4442540  0.65081361 -0.01932793 0.07036605 -0.4442540  0.888671688
hyp.3  0.6260173 -0.19267855  1.00000000 0.31673536  0.6260173 -0.089831329
chl.3  0.4903932 -0.05030188  0.33525853 0.43798160  0.4903932  0.259351631
age.4  1.0000000 -0.47845063  0.62601727 0.52295375  1.0000000 -0.425953368
bmi.4 -0.4784506  1.00000000 -0.19267855 0.32930226 -0.4784506  0.631161044
hyp.4  0.6260173 -0.19267855  1.00000000 0.31673536  0.6260173 -0.089831329
chl.4  0.5229537  0.32930226  0.31673536 1.00000000  0.5229537  0.013432372
age.5  1.0000000 -0.47845063  0.62601727 0.52295375  1.0000000 -0.425953368
bmi.5 -0.4259534  0.63116104 -0.08983133 0.01343237 -0.4259534  1.000000000
hyp.5  0.5109406 -0.04790076  0.78070175 0.31673536  0.5109406 -0.001761399
chl.5  0.3011421  0.11279888  0.23221204 0.47977507  0.3011421  0.475876245
             hyp.5     chl.5
age.1  0.510940563 0.3011421
bmi.1 -0.174005140 0.2601676
hyp.1  0.780701754 0.2322120
chl.1  0.369239577 0.8768280
age.2  0.510940563 0.3011421
bmi.2 -0.159712783 0.2354234
hyp.2  0.776643163 0.3076289
chl.2  0.354973210 0.6708878
age.3  0.510940563 0.3011421
bmi.3 -0.143715605 0.3307717
hyp.3  0.780701754 0.2322120
chl.3  0.234724679 0.8258638
age.4  0.510940563 0.3011421
bmi.4 -0.047900763 0.1127989
hyp.4  0.780701754 0.2322120
chl.4  0.316735361 0.4797751
age.5  0.510940563 0.3011421
bmi.5 -0.001761399 0.4758762
hyp.5  1.000000000 0.2807717
chl.5  0.280771652 1.0000000
>             # each m*m block contains of the same variable pair over different
>             # multiple imputations.
> 
> 
> 
> cleanEx(); nameEx("glm.mids");
> ### * glm.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glm.mids
> ### Title: Generelized Linear Regression on Multiply Imputed Data
> ### Aliases: glm.mids
> ### Keywords: misc
> 
> ### ** Examples
> 
> data(nhanes)
> imp <- mice(nhanes)     # do default multiple imputation on a numeric matrix

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> glm.mids((hyp==2)~bmi+chl,data=imp)
call :
glm.mids(formula = (hyp == 2) ~ bmi + chl, data = imp)

call1 :
mice(data = nhanes)

nmis :
age bmi hyp chl 
  0   9   8  10 

analyses :
[[1]]

Call:  glm(formula = formula, data = data.i) 

Coefficients:
(Intercept)          bmi          chl  
   0.093618    -0.017161     0.003172  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    4.56 
Residual Deviance: 4.232 	AIC: 34.54 

[[2]]

Call:  glm(formula = formula, data = data.i) 

Coefficients:
(Intercept)          bmi          chl  
  -0.431879    -0.012823     0.004738  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    3.36 
Residual Deviance: 2.508 	AIC: 21.46 

[[3]]

Call:  glm(formula = formula, data = data.i) 

Coefficients:
(Intercept)          bmi          chl  
  -0.214377    -0.008664     0.003478  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    4.56 
Residual Deviance: 4.02 	AIC: 33.25 

[[4]]

Call:  glm(formula = formula, data = data.i) 

Coefficients:
(Intercept)          bmi          chl  
   0.303086    -0.031416     0.003941  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    4.56 
Residual Deviance: 3.651 	AIC: 30.85 

[[5]]

Call:  glm(formula = formula, data = data.i) 

Coefficients:
(Intercept)          bmi          chl  
  -0.028781    -0.018495     0.004031  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    4.56 
Residual Deviance: 4.092 	AIC: 33.7 


>     # fit
>     # $call:
>     # glm.mids(formula = (hyp == 2) ~ bmi + chl, data = imp)
>     # 
>     # $call1:
>     # mice(data = nhanes)
>     # 
>     # $nmis:
>     #  age bmi hyp chl 
>     #    0   9   8  10
>     # 
>     # $analyses:
>     # $analyses[[1]]:
>     # Call:
>     # glm(formula = formula, data = data.i)
>     # 
>     # Coefficients:
>     #  (Intercept)         bmi         chl 
>     #   -0.4746337 -0.01565534 0.005417846
>     # 
>     # Degrees of Freedom: 25 Total; 22 Residual
>     # Residual Deviance: 2.323886 
>     # 
>     # $analyses[[2]]:
>     # Call:
>     # glm(formula = formula, data = data.i)
>     # 
>     # Coefficients:
>     #  (Intercept)         bmi         chl 
>     #   -0.1184695 -0.02885779 0.006090282
>     # 
>     # Degrees of Freedom: 25 Total; 22 Residual
>     # Residual Deviance: 3.647927 
>     # 
>     # $analyses[[3]]:
>     # Call:
>     # glm(formula = formula, data = data.i)
>     # 
>     # Coefficients:
>     #  (Intercept)          bmi         chl 
>     #   -0.1503616 -0.003002851 0.002130091
>     # 
>     # Degrees of Freedom: 25 Total; 22 Residual
>     # Residual Deviance: 3.799126 
>     # 
>     # $analyses[[4]]:
>     # Call:
>     # glm(formula = formula, data = data.i)
>     # 
>     # Coefficients:
>     #  (Intercept)        bmi         chl 
>     #  0.009442083 -0.0237619 0.004631881
>     # 
>     # Degrees of Freedom: 25 Total; 22 Residual
>     # Residual Deviance: 3.874522 
>     # 
>     # $analyses[[5]]:
>     # Call:
>     # glm(formula = formula, data = data.i)
>     # 
>     # Coefficients:
>     #  (Intercept)         bmi         chl 
>     #   0.09932161 -0.02168292 0.003857599
>     # 
>     # Degrees of Freedom: 25 Total; 22 Residual
>     # Residual Deviance: 4.025066 
>     # 
>     # 
>     # > 
>     # 
> 
> 
> 
> 
> cleanEx(); nameEx("lm.mids");
> ### * lm.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lm.mids
> ### Title: Linear Regression on Multiply Imputed Data
> ### Aliases: lm.mids
> ### Keywords: misc
> 
> ### ** Examples
> 
> data(nhanes)
> imp <- mice(nhanes)     # do default multiple imputation on a numeric matrix

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> fit <- lm.mids(bmi~hyp+chl,data=imp)
> 
> 
> 
> cleanEx(); nameEx("md.pattern");
> ### * md.pattern
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: md.pattern
> ### Title: Missing Data Pattern
> ### Aliases: md.pattern
> ### Keywords: misc
> 
> ### ** Examples
> 
> data(nhanes)
> md.pattern(nhanes)
   age hyp bmi chl   
13   1   1   1   1  0
 1   1   1   0   1  1
 3   1   1   1   0  1
 1   1   0   0   1  2
 7   1   0   0   0  3
     0   8   9  10 27
> #     age hyp bmi chl    
> #  13   1   1   1   1  0
> #   1   1   1   0   1  1
> #   3   1   1   1   0  1
> #   1   1   0   0   1  2
> #   7   1   0   0   0  3
> #   0   8   9  10 27
> 
> 
> 
> 
> cleanEx(); nameEx("mice");
> ### * mice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice
> ### Title: Multivariate Imputation by Chained Equations
> ### Aliases: mice
> ### Keywords: misc
> 
> ### ** Examples
> 
> data(nhanes)
> imp <- mice(nhanes)     # do default multiple imputation on a numeric matrix

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> imp
Multiply imputed data set
Call:
mice(data = nhanes)
Number of multiple imputations:  5
Missing cells per column:
age bmi hyp chl 
  0   9   8  10 
Imputation methods:
  age   bmi   hyp   chl 
   "" "pmm" "pmm" "pmm" 
VisitSequence:
bmi hyp chl 
  2   3   4 
PredictorMatrix:
    age bmi hyp chl
age   0   0   0   0
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
Random generator seed value:  NA 
> imp$imputations$bmi     # and list the actual imputations 
NULL
> complete(imp)       # show the first completed data matrix
   age  bmi hyp chl
1    1 29.6   1 199
2    2 22.7   1 187
3    1 30.1   1 187
4    3 25.5   2 184
5    1 20.4   1 113
6    3 25.5   2 184
7    1 22.5   1 118
8    1 30.1   1 187
9    2 22.0   1 238
10   2 27.4   1 186
11   1 30.1   1 187
12   2 22.0   1 238
13   3 21.7   1 206
14   2 28.7   2 204
15   1 29.6   1 199
16   1 30.1   1 187
17   3 27.2   2 284
18   2 26.3   2 199
19   1 35.3   1 218
20   3 25.5   2 184
21   1 30.1   1 187
22   1 33.2   1 229
23   1 27.5   1 131
24   3 24.9   1 186
25   2 27.4   1 186
> lm.mids(chl~age+bmi+hyp, imp)   # repeated linear regression on imputed data
call :
lm.mids(formula = chl ~ age + bmi + hyp, data = imp)

call1 :
mice(data = nhanes)

nmis :
age bmi hyp chl 
  0   9   8  10 

analyses :
[[1]]

Call:
lm(formula = formula, data = data.i)

Coefficients:
(Intercept)          age          bmi          hyp  
      8.858       31.071        5.426      -14.368  


[[2]]

Call:
lm(formula = formula, data = data.i)

Coefficients:
(Intercept)          age          bmi          hyp  
     -28.68        28.72         5.28        28.74  


[[3]]

Call:
lm(formula = formula, data = data.i)

Coefficients:
(Intercept)          age          bmi          hyp  
    -18.524       44.718        5.975      -18.648  


[[4]]

Call:
lm(formula = formula, data = data.i)

Coefficients:
(Intercept)          age          bmi          hyp  
    -91.960       56.135        7.886      -16.585  


[[5]]

Call:
lm(formula = formula, data = data.i)

Coefficients:
(Intercept)          age          bmi          hyp  
    -51.354       30.578        7.165       -4.294  



> 
> data(nhanes2)
> mice(nhanes2,im=c("sample","pmm","logreg","norm")) # imputation on mixed data with a different method per column

 iter imp variable
  1   1  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 algorithm did not converge
Warning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  1   2  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 algorithm did not converge
Warning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  1   3  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 algorithm did not converge
Warning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  1   4  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 algorithm did not converge
Warning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  1   5  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  2   1  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  2   2  bmi  hyp  hyp.d.1  chl
  2   3  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 algorithm did not converge
Warning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  2   4  bmi  hyp  hyp.d.1  chl
  2   5  bmi  hyp  hyp.d.1  chl
  3   1  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  3   2  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  3   3  bmi  hyp  hyp.d.1  chl
  3   4  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 algorithm did not converge
Warning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  3   5  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 algorithm did not converge
Warning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  4   1  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  4   2  bmi  hyp  hyp.d.1  chl
  4   3  bmi  hyp  hyp.d.1  chl
  4   4  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 algorithm did not converge
Warning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  4   5  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 algorithm did not converge
Warning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  5   1  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 algorithm did not converge
Warning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  5   2  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 algorithm did not converge
Warning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  5   3  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  5   4  bmi  hypWarning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 algorithm did not converge
Warning in glm.fit(x[ry, ], y[ry], family = binomial(link = logit), control = glm.control(maxit = 10,  : 
	 fitted probabilities numerically 0 or 1 occurred
  hyp.d.1  chl
  5   5  bmi  hyp  hyp.d.1  chl
Multiply imputed data set
Call:
mice(data = nhanes2, imputationMethod = c("sample", "pmm", "logreg", 
    "norm"))
Number of multiple imputations:  5
Missing cells per column:
age bmi hyp chl 
  0   9   8  10 
Imputation methods:
     age      bmi      hyp      chl 
"sample"    "pmm" "logreg"   "norm" 
VisitSequence:
bmi hyp chl 
  2   3   4 
PredictorMatrix:
    age bmi hyp chl
age   0   0   0   0
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
Random generator seed value:  NA 
> 
> 
> 
> cleanEx(); nameEx("mice.mids");
> ### * mice.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.mids
> ### Title: Multivariate Imputation by Chained Equations (Iteration Step)
> ### Aliases: mice.mids
> ### Keywords:  misc
> 
> ### ** Examples
> 
> data(nhanes)
> imp1 <- mice(nhanes,maxit=1)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
> imp2 <- mice.mids(imp1)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
> 
> # yields the same result as
> imp <- mice(nhanes,maxit=2)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
> 
> # for example:
> # 
> # > imp$imp$bmi[1,]
> #      1    2    3    4    5 
> # 1 30.1 35.3 33.2 35.3 27.5
> # > imp2$imp$bmi[1,]
> #      1    2    3    4    5 
> # 1 30.1 35.3 33.2 35.3 27.5
> # 
> 
> 
> 
> cleanEx(); nameEx("pool");
> ### * pool
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pool
> ### Title: Multiple Imputation Pooling
> ### Aliases: pool
> ### Keywords: misc
> 
> ### ** Examples
> 
> data(nhanes)
> imp <- mice(nhanes)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> fit <- lm.mids(bmi~hyp+chl,data=imp)
> pool(fit)
Call: pool(object = fit)

Pooled coefficients:
(Intercept)         hyp         chl 
22.14933792 -1.81556648  0.03601345 

Fraction of information about the coefficients missing due to nonresponse: 
(Intercept)         hyp         chl 
  0.2516476   0.2270863   0.3234710 
> #  Call: pool(object = fit)
> #  Pooled coefficients:
> #   (Intercept)       hyp        chl 
> #      21.29782 -1.751721 0.04085703
> #
> #  Fraction of information about the coefficients missing due to nonrespons
> #  e: 
> #   (Intercept)       hyp       chl 
> #     0.1592247 0.1738868 0.3117452
> #
> #  > summary(pool(fit))
> #           est         se          t       df     Pr(>|t|) 
> #  (Intercept)  21.29781702 4.33668150  4.9110863 16.95890 0.0001329371
> #      hyp  -1.75172102 2.30620984 -0.7595671 16.39701 0.4582953905
> #      chl   0.04085703 0.02532914  1.6130442 11.50642 0.1338044664
> #             lo 95      hi 95 missing       fmi 
> #  (Intercept)  12.14652927 30.4491048      NA 0.1592247
> #      hyp  -6.63106456  3.1276225       8 0.1738868
> #    chl  -0.01459414  0.0963082      10 0.3117452 
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.198 0.048 5.258 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
