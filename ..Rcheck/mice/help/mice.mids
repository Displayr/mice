mice.mids                package:mice                R Documentation

_M_u_l_t_i_v_a_r_i_a_t_e _I_m_p_u_t_a_t_i_o_n _b_y _C_h_a_i_n_e_d _E_q_u_a_t_i_o_n_s (_I_t_e_r_a_t_i_o_n _S_t_e_p)

_D_e_s_c_r_i_p_t_i_o_n:

     Takes a "mids"-object, and produces an new object of class "mids".

_U_s_a_g_e:

     mice.mids(obj, maxit=1, diagnostics=TRUE, printFlag=TRUE)

_A_r_g_u_m_e_n_t_s:

     obj: An object of class "mids", typically produces by a previous
          call to 'mice()' or 'mice.mids()' 

   maxit: The number of additional Gibbs sampling iterations. 

diagnostics: A Boolean flag. If TRUE, diagnostic information will be
          appended to  the value of the function. If FALSE, only the
          imputed data are saved.  The default is TRUE.

printFlag: A Boolean flag. If TRUE, diagnostic information during the
          Gibbs sampling iterations will be written to the command
          window.  The default is TRUE.

_D_e_t_a_i_l_s:

     This function enables the user to split up the computations of the
      Gibbs sampler into smaller parts. This is useful for the
     following reasons: \begin{itemize}

     *  RAM memory may become easily exhausted if the number of
        iterations is  large. Returning to prompt/session level may
        alleviate these problems.

     *  The user can compute customized convergence statistics at
        specific points, e.g. after each iteration, for monitoring
        convergence. - For computing a 'few extra iterations'.
        \end{itemize} Note: The imputation model itself is specified in
        the mice() function and cannot be changed with mice.mids. The
        state of the random generator is saved with the mids-object.

_A_u_t_h_o_r(_s):

     Stef van Buuren, Karin Oudshoorn, 2000

_R_e_f_e_r_e_n_c_e_s:

     Van Buuren, S. & Oudshoorn, C.G.M. (2000). Multivariate Imputation
     by Chained Equations:  MICE V1.0 User's manual. Report
     PG/VGZ/00.038, TNO Prevention and Health, Leiden.

_S_e_e _A_l_s_o:

_E_x_a_m_p_l_e_s:

     data(nhanes)
     imp1 <- mice(nhanes,maxit=1)
     imp2 <- mice.mids(imp1)

     # yields the same result as
     imp <- mice(nhanes,maxit=2)

     # for example:
     # 
     # > imp$imp$bmi[1,]
     #      1    2    3    4    5 
     # 1 30.1 35.3 33.2 35.3 27.5
     # > imp2$imp$bmi[1,]
     #      1    2    3    4    5 
     # 1 30.1 35.3 33.2 35.3 27.5
     # 

